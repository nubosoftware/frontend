var BUFFSIZE = 1024;
var COMPRESSION_HEADER_SIZE = 5;

function UXIPWriter(callback) {
    "use strict";
    var sendfunc = callback;

    var buffer = new ArrayBuffer(BUFFSIZE);
    var dv = new DataView(buffer, 0);
    var offset = 0;

    if (PRINT_NETWORK_COMMANDS == null) {
        var PRINT_NETWORK_COMMANDS = false;
    }

    this.flush = function() {
        var sendBuffer = buffer.slice(0, offset);
        if (PRINT_NETWORK_COMMANDS) {
            Log.d(DEBUG_PROTOCOL_NETWORK_STR, "uxipwriter:: Flush " + offset + " bytes");
        }
        /////////////////////
        if (Common.withService || !NuboOutputStreamMgr.getInstance().getIsPlayerLogin()) {
            var zLibBuffer = new ArrayBuffer(offset+COMPRESSION_HEADER_SIZE);
            var zLibDv = new DataView(zLibBuffer, 0);
            zLibDv.setInt8(0, 0);
            zLibDv.setInt32(1, offset);
            for (var i=0; i<offset ; i++) {
                zLibDv.setInt8(i+COMPRESSION_HEADER_SIZE, dv.getInt8(i));
            }
            sendfunc(zLibBuffer);
        } else {
            sendfunc(sendBuffer);
        }
        ///////////////////
        offset = 0;

        if (buffer.byteLength > 1024) {
            BUFFSIZE = 1024;
            buffer = new ArrayBuffer(BUFFSIZE);
            dv = new DataView(buffer, 0);
        }
    };

    this.checkBufferSpace = function(numBytes) {
        if ((offset + numBytes) > buffer.byteLength) { // resize buffer
            var newBuffer = new ArrayBuffer(offset + numBytes);
            var newArr = new Uint8Array(newBuffer);
            newArr.set(new Uint8Array(buffer), 0);

            buffer = newBuffer;
            dv = new DataView(newBuffer, 0);
        }
    };

    this.writeInt = function(val) {
        this.checkBufferSpace(4);
        dv.setInt32(offset, val);
        offset += 4;
    };

    this.writeInt16 = function(val) {
        this.checkBufferSpace(2);
        dv.setInt16(offset, val);
        offset += 2;
    };

    this.writeFloat = function(val) {
        this.checkBufferSpace(4);
        dv.setFloat32(offset, val);
        offset += 4;
    };

    this.writeByte = function(val) {
        this.checkBufferSpace(1);
        dv.setInt8(offset, val);
        offset += 1;
    };

    this.writeBoolean = function(val) {
        var ch = ( val ? 1 : 0);
        this.writeByte(ch);
    };

    this.writeLong = function(val) {
        this.checkBufferSpace(8);
        dv.setUint32(offset, val.hi);
        offset += 4;
        dv.setUint32(offset, val.lo);
        offset += 4;
    };

    // can be used to write long typed numbers to network.
    // i.e. numbers that will be interpreted as long type in java side
    this.writeLongAsFloat = function(val) {
        this.checkBufferSpace(8);
        dv.setFloat64(offset, val);
        offset += 8;
    };

    this.writeString = function(val) {
        if (val == null) {
            this.writeByte(1);
            return;
        }
        var strBuff = UTF8.encode(val);
        var byteLength = strBuff.byteLength;
        this.writeByte(0);
        this.writeInt16(byteLength);
        var dvStr = byteLength ? new DataView(strBuff, 0): null;
        this.checkBufferSpace(byteLength);
        for (var i = 0; i < byteLength; i++) {
            var b = dvStr.getUint8(i);
            //console.log("b="+b);
            dv.setUint8(offset, b);
            offset++;
        }
    };

    this.writeKeyEvent = function(e) {
        //long downTime, long eventTime, int action, float x, float y, int metaState
        if (e != null) {
            this.writeBoolean(false);
            //not null
            var nullTime = {
                hi : 0,
                lo : 0
            };
            this.writeLong(nullTime);
            this.writeLong(nullTime);
            this.writeInt(e.action);
            this.writeInt(e.keyCode);
            this.writeInt(0);
            this.writeInt(0);
            this.writeInt(-1);
            this.writeInt(0);
            this.writeInt(0);
            this.writeInt(0);
            var chars = e.characters;
            if (chars == "undefined")
                chars = null;
            //Log.e("characters="+chars);
            this.writeString(chars);
        } else {
            this.writeBoolean(true);
        }
    };

    this.writeArrayBuffer = function(buf) {
        var len = buf.byteLength;
        this.checkBufferSpace(len);
        var dst = new Uint8Array(buffer);
        dst.set(new Uint8Array(buf), offset);
        offset += len;
    };

    this.notifyClearProcessCache = function(processId) {
        var processIdInt;

        if (typeof processId === 'string') {
            processIdInt = parseInt(processId);
        } else {
            processIdInt = processId;
        }
        var nuboByte = getNuboByte(PlayerCmd.clearProcessCache);
        NuboOutputStreamMgr.getInstance().sendCmd(nuboByte, processIdInt);
    };

    this.startNuboCmd = function() {
        offset = 0;
        if (Common.withService || !NuboOutputStreamMgr.getInstance().getIsPlayerLogin()) {
            this.writeInt(0); //save place for command size
        }
    };

    this.endNuboCmd = function() {
        if (Common.withService || !NuboOutputStreamMgr.getInstance().getIsPlayerLogin()) {
            dv.setInt32(0, offset);
        }
    };
}

function getNuboByte(nuboByte) {
    var nuboB = {
            name : "nuboByte",
            val : nuboByte
    };
    return nuboB;
}

function testWriter() {

    var writer = new UXIPWriter(function(buffer) {
        console.log("send byteLength=" + buffer.byteLength);
    });

    writer.writeInt(5);
    writer.writeInt(50);
    writer.writeFloat(50.5);
    for (var i = 0; i < 2000; i++) {
        writer.writeByte(i);
    }
    writer.writeString
    writer.flush();
    for (var i = 0; i < 2000; i++) {
        writer.writeByte(i);
    }

    writer.flush();

}

if ( typeof module != 'undefined') {
    module.exports = {
        UXIPWriter : UXIPWriter,
        testWriter : testWriter
    };
    UTF8 = require('./utf8.js').UTF8;
}
